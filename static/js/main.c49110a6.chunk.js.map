{"version":3,"sources":["assets/images/mywallet.jpeg","assets/images/mywallet2.jpeg","pages/Login.js","actions/userActions.js","services/exchangeRatesAPI.js","components/ControlForm.js","components/Header.jsx","actions/walletActions.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/userReducer.js","reducers/walletReducer.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","Login","handleChange","target","name","value","setState","validateButton","state","email","password","validateEmail","validadePassword","validatePassword","isDisabled","handleSubmit","props","history","emailDispatch","push","length","test","this","className","src","walletLogo","alt","htmlFor","data-testid","id","onChange","placeholder","type","onClick","disabled","Component","connect","dispatch","payload","exchangeRatesAPI","a","fetch","response","json","result","ControlForm","headerState","description","currency","method","tag","currencies","headerProps","Object","values","filter","rate","codein","map","index","key","code","data-ask","ask","data-currencyname","Header","expensesDispatch","prevState","expenses","exchangeRates","console","log","updateTotal","reduce","prev","exp","Number","getAllCurrencies","totalExpenses","MyWalletLogo","toFixed","user","wallet","edit","rates","Carteira","handleEdit","dispatchEdit","isEditing","itemIndex","undefined","handleDelete","Table","striped","bordered","hover","variant","size","expense","currencyData","split","icon","faPenToSquare","faTrashCan","App","exact","path","component","Wallet","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","walletReducer","item","rootReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,0PCOrCC,E,kDACJ,aAAe,IAAD,8BACZ,gBASFC,aAAe,YAAkC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiBF,EAAOC,IACxB,EAAKE,kBAZO,EAedA,eAAiB,WACf,MAA4B,EAAKC,MAAzBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACTC,EAAgB,EAAKA,cAAcF,GACnCG,EAAmB,EAAKC,iBAAiBH,IACzB,IAAlBC,IAAgD,IAArBC,EAC7B,EAAKN,SAAS,CAAEQ,YAAY,IAE5B,EAAKR,SAAS,CAAEQ,YAAY,KAtBlB,EA0BdC,aAAe,WACb,IAAQN,EAAU,EAAKD,MAAfC,MACR,EAAmC,EAAKO,MAAhCC,EAAR,EAAQA,SACRC,EADA,EAAiBA,eACHT,GACdQ,EAAQE,KAAK,cA9BD,EAiCdN,iBAAmB,SAACH,GAElB,OAAQA,EAASU,OAAS,EADH,GAlCX,EAsCdT,cAAgB,SAACF,GAEf,OADgB,eACCY,KAAKZ,IArCtB,EAAKD,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVI,YAAY,GANF,E,0CA2Cd,WACE,MAAwCQ,KAAKd,MAArCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUI,EAAzB,EAAyBA,WAEzB,OACE,8BACE,6BAASS,UAAU,SACjB,yBAAKA,UAAU,cACb,yBAAKC,IAAMC,IAAaC,IAAI,eAE9B,yBAAKH,UAAU,gBACb,2BAAOI,QAAQ,SACb,2BACEC,cAAY,cACZC,GAAG,QACHzB,KAAK,QACL0B,SAAWR,KAAKpB,aAChB6B,YAAY,kBACZC,KAAK,OACL3B,MAAQI,KAGZ,2BAAOkB,QAAQ,YACb,2BACEC,cAAY,iBACZC,GAAG,WACHzB,KAAK,WACL0B,SAAWR,KAAKpB,aAChB6B,YAAY,qBACZC,KAAK,WACL3B,MAAQK,KAGZ,4BACEsB,KAAK,SACLT,UAAS,wBAAoBT,GAAc,0BAC3CmB,QAAUX,KAAKP,aACfmB,SAAWpB,GAJb,iB,GA5EQqB,aAoGLC,cAAQ,MAJI,SAACC,GAAD,MAAe,CACxCnB,cAAe,SAACT,GAAD,OAAW4B,ECrGc,CACxCL,KAH4B,iBAI5BM,QDmGgD7B,QAGnC2B,CAAkCnC,G,yEElGlCsC,EAPO,uCAAG,8BAAAC,EAAA,sEACAC,MAHT,+CAES,cACjBC,EADiB,gBAEFA,EAASC,OAFP,cAEjBC,EAFiB,yBAIhBA,GAJgB,2CAAH,qDC6HPC,E,4JA3Hb,WACE,MAaIvB,KAAKN,MAbT,IACE8B,YACEzC,EAFJ,EAEIA,MACA0C,EAHJ,EAGIA,YACAC,EAJJ,EAIIA,SACAC,EALJ,EAKIA,OACAC,EANJ,EAMIA,IAGAC,EATJ,EAQEC,YACED,WAEFrB,EAXF,EAWEA,SACAG,EAZF,EAYEA,QAGF,OACE,6BAASV,UAAU,WAEjB,2BAAOI,QAAQ,QAAQE,GAAG,eAA1B,SAEE,2BACEG,KAAK,SACLH,GAAG,QACHzB,KAAK,QACLwB,cAAY,cACZL,UAAU,cACVlB,MAAQA,EACRyB,SAAWA,KAGf,2BAAOH,QAAQ,WAAWE,GAAG,kBAA7B,SAEE,4BACEG,KAAK,OACLH,GAAG,WACHzB,KAAK,WACLwB,cAAY,iBACZvB,MAAQ2C,EACRlB,SAAWA,GAETuB,OAAOC,OAAOH,GACbI,QAAO,SAACC,GAAD,MAA0B,SAAhBA,EAAKC,UACtBC,KAAI,SAACF,EAAMG,GAAP,OACH,4BACEC,IAAMD,EACN/B,cAAc4B,EAAKK,KACnBC,WAAWN,EAAKO,IAChBC,oBAAoBR,EAAKpD,MAEvBoD,EAAKK,WAKjB,2BAAOlC,QAAQ,UAAUE,GAAG,iBAA5B,0BAEE,4BACEG,KAAK,OACLH,GAAG,UACHzB,KAAK,SACLwB,cAAY,eACZvB,MAAQ4C,EACRnB,SAAWA,GAEX,4BAAQzB,MAAM,YAAd,YACA,4BAAQA,MAAM,2BAAd,2BACA,4BAAQA,MAAM,0BAAd,4BAGJ,2BAAOsB,QAAQ,MAAME,GAAG,aAAxB,OAEE,4BACEG,KAAK,OACLH,GAAG,MACHzB,KAAK,MACLwB,cAAY,YACZvB,MAAQ6C,EACRpB,SAAWA,GAEX,4BAAQzB,MAAM,qBAAd,qBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,YAAd,cAGJ,2BAAOsB,QAAQ,cAAcE,GAAG,qBAAhC,mBAEE,2BACEG,KAAK,OACLH,GAAG,cACHzB,KAAK,cACLwB,cAAY,oBACZL,UAAU,oBACVlB,MAAQ0C,EACRjB,SAAWA,KAGf,4BACEE,KAAK,SACLH,GAAG,SACHN,UAAU,cACVU,QAAUA,GAJZ,0B,GApGkBE,aCOpB8B,E,kDACJ,aAAe,IAAD,8BACZ,gBAqCF/D,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OAChB,EAAKG,SAAL,eAAiBH,EAAOC,KAAOD,EAAOE,SAvC1B,EA0CdU,aA1Cc,sBA0CC,4CAAAyB,EAAA,6DACL0B,EAAqB,EAAKlD,MAA1BkD,iBADK,EAST,EAAK1D,MANPqB,EAHW,EAGXA,GACAxB,EAJW,EAIXA,MACA0C,EALW,EAKXA,YACAC,EANW,EAMXA,SACAC,EAPW,EAOXA,OACAC,EARW,EAQXA,IAGF,EAAK5C,UAAS,SAAC6D,GAAD,MAAgB,CAC5BtC,GAAIsC,EAAUtC,GAAK,MAZR,KAgBXA,EAhBW,KAiBXxB,EAjBW,KAkBX0C,EAlBW,KAmBXC,EAnBW,KAoBXC,EApBW,KAqBXC,EArBW,UAsBUX,IAtBV,oBAeP6B,EAfO,CAgBXvC,GAhBW,KAiBXxB,MAjBW,KAkBX0C,YAlBW,KAmBXC,SAnBW,KAoBXC,OApBW,KAqBXC,IArBW,KAsBXmB,cAtBW,MA0BbH,EAAiBE,GACjBE,QAAQC,IAAIH,EAAU,mBAEtB,EAAK9D,SAAS,CACZD,MAAO,EACP0C,YAAa,GACbC,SAAU,MACVC,OAAQ,WACRC,IA9EW,sBA4CA,4CA1CD,EAgFdsB,YAAc,WAGZ,OAFqB,EAAKxD,MAAlBoD,SAEQK,QAAO,SAACC,EAAMC,GAAP,OAAeD,EAAQE,OAAOD,EAAItE,OACvDsE,EAAIN,cAAcM,EAAI3B,UAAUe,MAAM,IAjFxC,EAAKvD,MAAQ,CACXqB,GAAI,EACJxB,MAAO,EACP0C,YAAa,GACbC,SAAU,MACVC,OAAQ,WACRC,IAXW,qBAED,E,qDAad,YAEE2B,EAD6BvD,KAAKN,MAA1B6D,sB,oBAyEV,WACE,IACEpE,EAGEa,KAAKN,MAHPP,MAcIqE,EAAgBxD,KAAKkD,cAE3B,OACE,gCACE,6BAASjD,UAAU,UACjB,yBAAKC,IAAMuD,IAAerD,IAAI,iBAAiBH,UAAU,iBACzD,yBAAKA,UAAU,iBACb,0BAAMK,cAAY,eAAlB,iBAA4CnB,IAC5C,0BAAMmB,cAAY,eAAlB,qBAEIkD,EAAcE,QAAQ,IAE1B,0BAAMpD,cAAY,yBAAlB,SAGJ,kBAAC,EAAD,CACEkB,YAAcxB,KAAKd,MACnB4C,YAAc9B,KAAKN,MACnBc,SAAWR,KAAKpB,aAChB+B,QAAUX,KAAKP,oB,GA3HJoB,aAqJNC,eAZS,SAAC5B,GAAD,MAAY,CAClCC,MAAOD,EAAMyE,KAAKxE,MAClB0C,WAAY3C,EAAM0E,OAAO/B,WACzBiB,SAAU5D,EAAM0E,OAAOd,SACvBe,KAAM3E,EAAM0E,OAAOC,SAGM,SAAC9C,GAAD,MAAe,CACxCwC,iBAAkB,kBAAMxC,GC/HxBiC,QAAQC,IAAI,eACZ,uCAAO,WAAOlC,GAAP,eAAAG,EAAA,sEAEeD,IAFf,OAEC6C,EAFD,OAGL/C,EAzBuC,CACzCL,KAN4B,iBAO5BM,QAuByB8C,IAHlB,2CAAP,yDD+HAlB,iBAAkB,SAACE,GAAD,OAAc/B,EChJO,CACvCL,KAV0B,eAW1BM,QD8IqD8B,QAGxChC,CAA6C6B,GErJtDoB,E,kDACJ,aAAe,IAAD,8BACZ,gBAQFC,WAAa,SAAC3B,GAEZ,IAAQ4B,EAAiB,EAAKvE,MAAtBuE,aACR,EAAKjF,SAAS,CACZkF,WAAW,EACXC,UAAW9B,IACV,kBAAM4B,EAAa,EAAK/E,WAZ3B,EAAKA,MAAQ,CACXgF,WAAW,EACXC,eAAWC,GALD,E,0CAkBd,WAAU,IAAD,OACP,EAAmCpE,KAAKN,MAAhCoD,EAAR,EAAQA,SAAUuB,EAAlB,EAAkBA,aAElB,OACE,oCACE,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,OAAOC,KAAK,MAChD,+BACE,4BACE,+CACA,mCACA,sDACA,qCACA,qCACA,mDACA,gDACA,qDACA,gDAGJ,+BACI7B,EAASV,KAAI,SAACwC,EAASvC,GACvB,IACE9B,EAOEqE,EAPFrE,GACAkB,EAMEmD,EANFnD,YACAG,EAKEgD,EALFhD,IACAD,EAIEiD,EAJFjD,OACA5C,EAGE6F,EAHF7F,MACA2C,EAEEkD,EAFFlD,SAIImD,EAFFD,EADF7B,cAGiCrB,GAC3B5C,EAAc+F,EAAd/F,KAAM2D,EAAQoC,EAARpC,IAEd,OACE,wBAAIH,IAAMD,GACR,4BAAKZ,GACL,4BAAKG,GACL,4BAAKD,GACL,4BAAK2B,OAAOvE,GAAO2E,QAAQ,IAC3B,4BAAK5E,EAAKgG,MAAM,KAAK,IACrB,4BAAKxB,OAAOb,GAAKiB,QAAQ,IACzB,6BAAM3E,EAAQ0D,GAAKiB,QAAQ,IAC3B,oCACA,4BACE,4BACEhD,KAAK,SACLT,UAAU,WACVK,cAAY,WACZK,QAAU,kBAAM,EAAKqD,WAAWzD,KAEhC,kBAAC,IAAD,CAAiBwE,KAAOC,OAE1B,4BACEtE,KAAK,SACLT,UAAU,aACVK,cAAY,aACZK,QAAU,kBAAM0D,EAAa9D,KAE7B,kBAAC,IAAD,CAAiBwE,KAAOE,mB,GA/EvBpE,aA0GRC,eATS,SAAC5B,GAAD,MAAY,CAClC4D,SAAU5D,EAAM0E,OAAOd,aAGE,SAAC/B,GAAD,MAAe,CACxCsD,aAAc,SAAChC,GAAD,OAAWtB,ED/FiB,CAC1CL,KAd6B,kBAe7BM,QC6FiDqB,KACjD4B,aAAc,SAAC/E,GAAD,OAAW6B,ED3Fc,CACvCL,KAlB0B,eAmB1BM,QCyF8C9B,QAGjC4B,CAA6CiD,GCtG7CmB,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAY1G,IAClC,kBAAC,IAAD,CAAOwG,OAAK,EAACC,KAAK,YAAYC,UAAYC,MCG5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCfAC,EAAgB,CACpBzG,MAAO,IAeM0G,EAZK,WAAoC,IAAnC3G,EAAkC,uDAA1B0G,EAAeE,EAAW,uCACrD,OAAQA,EAAOpF,MACf,IRR4B,iBQS1B,OAAO,2BACFxB,GADL,IAEEC,MAAO2G,EAAO9E,UAElB,QACE,OAAO9B,I,QCPL0G,EAAgB,CACpB/D,WAAY,GACZiB,SAAU,GACVe,KAAM,IAkCOkC,EA/BO,WAAoC,IAAnC7G,EAAkC,uDAA1B0G,EAAeE,EAAW,uCACvD,OAAQA,EAAOpF,MACf,ILd4B,iBKe1B,OAAO,2BACFxB,GADL,IAEE2C,WAAYiE,EAAO9E,UAEvB,ILlB0B,eKmBxB,OAAO,2BACF9B,GADL,IAEE4D,SAAS,GAAD,mBAAM5D,EAAM4D,UAAZ,CAAsBgD,EAAO9E,YAIzC,ILxB6B,kBK2B3B,OAAO,2BACF9B,GADL,IAEE4D,SAAU5D,EAAM4D,SAASb,QAAO,SAAC+D,GAAD,OAAUA,EAAKzF,KAAOuF,EAAO9E,aAEjE,IL9B0B,eK+BxB,OAAO,2BACF9B,GADL,IAEE2E,KAAMiC,EAAO9E,UAEjB,QACE,OAAO9B,IC7BI+G,EALMC,0BAAgB,CACnCvC,KAAMkC,EACNjC,OAAQmC,ICFKI,EAFDC,sBAAYH,EAAcI,8BAAoBC,0BAAgBC,OCI5EC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAQA,GAChB,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJO,SAASC,eAAe,SLoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.c49110a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mywallet.217c0234.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/mywallet2.79df28b6.jpeg\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addUserEmail } from '../actions/userActions';\nimport '../assets/styles/Login.css';\nimport walletLogo from '../assets/images/mywallet.jpeg';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n      isDisabled: true,\n    };\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n    this.validateButton();\n  }\n\n  validateButton = () => {\n    const { email, password } = this.state;\n    const validateEmail = this.validateEmail(email);\n    const validadePassword = this.validatePassword(password);\n    if (validateEmail === false && validadePassword === false) {\n      this.setState({ isDisabled: false });\n    } else {\n      this.setState({ isDisabled: true });\n    }\n  }\n\n  handleSubmit = () => {\n    const { email } = this.state;\n    const { history, emailDispatch } = this.props;\n    emailDispatch(email);\n    history.push('/carteira');\n  }\n\n  validatePassword = (password) => {\n    const MAX_PWD_LENGTH = 6;\n    return (password.length + 1) < MAX_PWD_LENGTH;\n  }\n\n  validateEmail = (email) => {\n    const pattern = /\\S+@\\S+\\.\\S+/;\n    return (!pattern.test(email));\n  }\n\n  render() {\n    const { email, password, isDisabled } = this.state;\n\n    return (\n      <main>\n        <section className=\"login\">\n          <div className=\"login__img\">\n            <img src={ walletLogo } alt=\"My Wallet\" />\n          </div>\n          <div className=\"login__input\">\n            <label htmlFor=\"email\">\n              <input\n                data-testid=\"email-input\"\n                id=\"email\"\n                name=\"email\"\n                onChange={ this.handleChange }\n                placeholder=\"Type your email\"\n                type=\"text\"\n                value={ email }\n              />\n            </label>\n            <label htmlFor=\"password\">\n              <input\n                data-testid=\"password-input\"\n                id=\"password\"\n                name=\"password\"\n                onChange={ this.handleChange }\n                placeholder=\"Type your password\"\n                type=\"password\"\n                value={ password }\n              />\n            </label>\n            <button\n              type=\"button\"\n              className={ `login__button ${isDisabled && 'login__button-disabled'}` }\n              onClick={ this.handleSubmit }\n              disabled={ isDisabled }\n            >\n              Entrar\n            </button>\n          </div>\n        </section>\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.instanceOf(Object),\n  getEmailDispatch: PropTypes.func,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  emailDispatch: (email) => dispatch(addUserEmail(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","// Coloque aqui suas actions\nexport const ADD_USER_EMAIL = 'ADD_USER_EMAIL';\n\nexport const addUserEmail = (payload) => ({\n  type: ADD_USER_EMAIL,\n  payload,\n});\n","const API_URL = 'https://economia.awesomeapi.com.br/json/all';\n\nconst exchangeRatesAPI = async () => {\n  const response = await fetch(API_URL);\n  const result = await response.json();\n  // delete result.USDT;\n  return result;\n};\n\nexport default exchangeRatesAPI;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\n\nclass ControlForm extends Component {\n  render() {\n    const {\n      headerState: {\n        value,\n        description,\n        currency,\n        method,\n        tag,\n      },\n      headerProps: {\n        currencies,\n      },\n      onChange,\n      onClick,\n    } = this.props;\n\n    return (\n      <section className=\"control\">\n        {/* { `control ${edit.isEditing && 'control-edit'}` } */}\n        <label htmlFor=\"value\" id=\"value-label\">\n          Valor:\n          <input\n            type=\"number\"\n            id=\"value\"\n            name=\"value\"\n            data-testid=\"value-input\"\n            className=\"value-input\"\n            value={ value }\n            onChange={ onChange }\n          />\n        </label>\n        <label htmlFor=\"currency\" id=\"currency-label\">\n          Moeda:\n          <select\n            type=\"text\"\n            id=\"currency\"\n            name=\"currency\"\n            data-testid=\"currency-input\"\n            value={ currency }\n            onChange={ onChange }\n          >\n            { Object.values(currencies)\n              .filter((rate) => rate.codein !== 'BRLT')\n              .map((rate, index) => (\n                <option\n                  key={ index }\n                  data-testid={ rate.code }\n                  data-ask={ rate.ask }\n                  data-currencyname={ rate.name }\n                >\n                  { rate.code }\n                </option>\n              ))}\n          </select>\n        </label>\n        <label htmlFor=\"payment\" id=\"payment-label\">\n          Método de pagamento:\n          <select\n            type=\"text\"\n            id=\"payment\"\n            name=\"method\"\n            data-testid=\"method-input\"\n            value={ method }\n            onChange={ onChange }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\" id=\"tag-label\">\n          Tag:\n          <select\n            type=\"text\"\n            id=\"tag\"\n            name=\"tag\"\n            data-testid=\"tag-input\"\n            value={ tag }\n            onChange={ onChange }\n          >\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        <label htmlFor=\"description\" id=\"description-label\">\n          Descrição:\n          <input\n            type=\"text\"\n            id=\"description\"\n            name=\"description\"\n            data-testid=\"description-input\"\n            className=\"description-input\"\n            value={ description }\n            onChange={ onChange }\n          />\n        </label>\n        <button\n          type=\"submit\"\n          id=\"button\"\n          className=\"control-btn\"\n          onClick={ onClick }\n        >\n          Adicionar despesa\n        </button>\n      </section>\n    );\n  }\n}\n\nControlForm.propTypes = {\n  value: propTypes.number,\n  description: propTypes.string,\n  currency: propTypes.number,\n  method: propTypes.string,\n  tag: propTypes.string,\n  currencies: propTypes.object,\n  onChange: propTypes.func,\n  onClick: propTypes.func,\n}.isRequired;\n\nexport default ControlForm;\n","import propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../assets/styles/Wallet.css';\nimport MyWalletLogo from '../assets/images/mywallet2.jpeg';\nimport { getCurrencies, addExpenses } from '../actions/walletActions';\nimport exchangeRatesAPI from '../services/exchangeRatesAPI';\nimport ControlForm from './ControlForm';\n\nconst tagValue = 'Alimentação';\nclass Header extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      id: 0,\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: tagValue,\n    };\n  }\n\n  componentDidMount() {\n    const { getAllCurrencies } = this.props;\n    getAllCurrencies(); // executa para enviar ao estado global\n    // this.editField();\n  }\n\n  // editField = () => {\n  //   const { edit, expenses } = this.props;\n\n  //   if (edit.isEditing) {\n  //     const item = expenses[edit.itemIndex];\n  //     console.log(item);\n  //     this.setState({\n  //       id: item.id,\n  //       value: item.value,\n  //       description: item.description,\n  //       currency: item.currency,\n  //       method: item.method,\n  //       tag: item.tag,\n  //     });\n  //   } else {\n  //     console.log('nao esta em edicao');\n  //   }\n  // }\n\n  handleChange = ({ target }) => {\n    this.setState({ [target.name]: target.value });\n  }\n\n  handleSubmit = async () => {\n    const { expensesDispatch } = this.props;\n    const {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n    } = this.state;\n\n    this.setState((prevState) => ({\n      id: prevState.id + 1,\n    }));\n\n    const expenses = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: await exchangeRatesAPI(),\n      // precisou chamar novamente a requisicao direto da API para guardar o objeto\n    };\n\n    expensesDispatch(expenses);\n    console.log(expenses, 'header - submit');\n\n    this.setState({\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: tagValue,\n    });\n  }\n\n  updateTotal = () => {\n    const { expenses } = this.props;\n    // console.log(expenses);\n    return expenses.reduce((prev, exp) => prev + (Number(exp.value)\n    * exp.exchangeRates[exp.currency].ask), 0);\n  }\n\n  render() {\n    const {\n      email,\n      // currencies,\n      // edit,\n    } = this.props;\n\n    // const {\n    //   value,\n    //   description,\n    //   currency,\n    //   method,\n    //   tag,\n    // } = this.state;\n    // console.log(Object.values(currencies));\n\n    const totalExpenses = this.updateTotal();\n\n    return (\n      <header>\n        <section className=\"header\">\n          <img src={ MyWalletLogo } alt=\"My Wallet Logo\" className=\"header__logo\" />\n          <div className=\"header__right\">\n            <span data-testid=\"email-field\">{ `Email: ${email}` }</span>\n            <span data-testid=\"total-field\">\n              Despesa Total:&nbsp;\n              { totalExpenses.toFixed(2) }\n            </span>\n            <span data-testid=\"header-currency-field\">BRL</span>\n          </div>\n        </section>\n        <ControlForm\n          headerState={ this.state }\n          headerProps={ this.props }\n          onChange={ this.handleChange }\n          onClick={ this.handleSubmit }\n        />\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: propTypes.string,\n  currencies: propTypes.object,\n  expenses: propTypes.object,\n  edit: propTypes.object,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  edit: state.wallet.edit,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getAllCurrencies: () => dispatch(getCurrencies()),\n  expensesDispatch: (expenses) => dispatch(addExpenses(expenses)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import exchangeRatesAPI from '../services/exchangeRatesAPI';\n// Coloque aqui suas actions\nexport const ADD_CURRENCIES = 'ADD_CURRENCIES';\nexport const ADD_EXPENSES = 'ADD_EXPENSES';\nexport const REMOVE_EXPENSES = 'REMOVE_EXPENSES';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\n\nexport const addCurrencies = (payload) => ({\n  type: ADD_CURRENCIES,\n  payload,\n});\n\nexport const addExpenses = (payload) => ({\n  type: ADD_EXPENSES,\n  payload,\n});\n\nexport const removeExpenses = (payload) => ({\n  type: REMOVE_EXPENSES,\n  payload,\n});\n\nexport const editExpense = (payload) => ({\n  type: EDIT_EXPENSE,\n  payload,\n});\n\nexport const getCurrencies = () => {\n  console.log('request API');\n  return async (dispatch) => {\n    // console.log(dispatch, 'dispatch');\n    const rates = await exchangeRatesAPI();\n    dispatch(addCurrencies(rates));\n  };\n};\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashCan, faPenToSquare } from '@fortawesome/free-solid-svg-icons';\nimport Table from 'react-bootstrap/Table';\nimport '../assets/styles/Wallet.css';\nimport Header from '../components/Header';\nimport { removeExpenses, editExpense } from '../actions/walletActions';\n\nclass Carteira extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isEditing: false,\n      itemIndex: undefined,\n    };\n  }\n\n  handleEdit = (index) => {\n    // console.log(index);\n    const { dispatchEdit } = this.props;\n    this.setState({\n      isEditing: true,\n      itemIndex: index,\n    }, () => dispatchEdit(this.state));\n  }\n\n  render() {\n    const { expenses, handleDelete } = this.props;\n\n    return (\n      <>\n        <Header />\n        <Table striped bordered hover variant=\"dark\" size=\"sm\">\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            { expenses.map((expense, index) => {\n              const {\n                id,\n                description,\n                tag,\n                method,\n                value,\n                currency,\n                exchangeRates,\n              } = expense;\n\n              const currencyData = exchangeRates[currency];\n              const { name, ask } = currencyData;\n\n              return (\n                <tr key={ index }>\n                  <td>{description}</td>\n                  <td>{tag}</td>\n                  <td>{method}</td>\n                  <td>{Number(value).toFixed(2)}</td>\n                  <td>{name.split('/')[0]}</td>\n                  <td>{Number(ask).toFixed(2)}</td>\n                  <td>{(value * ask).toFixed(2)}</td>\n                  <td>Real</td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      className=\"btn-edit\"\n                      data-testid=\"edit-btn\"\n                      onClick={ () => this.handleEdit(id) }\n                    >\n                      <FontAwesomeIcon icon={ faPenToSquare } />\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"btn-delete\"\n                      data-testid=\"delete-btn\"\n                      onClick={ () => handleDelete(id) }\n                    >\n                      <FontAwesomeIcon icon={ faTrashCan } />\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n}\n\nCarteira.propTypes = {\n  email: propTypes.string,\n  expenses: propTypes.object,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleDelete: (index) => dispatch(removeExpenses(index)),\n  dispatchEdit: (state) => dispatch(editExpense(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Carteira);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { ADD_USER_EMAIL } from '../actions/userActions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_USER_EMAIL:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  ADD_CURRENCIES,\n  ADD_EXPENSES,\n  REMOVE_EXPENSES,\n  EDIT_EXPENSE,\n} from '../actions/walletActions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  edit: [],\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  case ADD_EXPENSES:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n      // nesse item preciso adicionar tudo o que ja existe em expenses para adicionar um novo item\n      // fazer spread dentro do expenses serve para acumular valores toda vez que é adicionado\n    };\n  case REMOVE_EXPENSES:\n    // console.log(state.expenses.map((item) => item.id));\n    // console.log(state.expenses.filter((item) => item.id !== action.payload));\n    return {\n      ...state,\n      expenses: state.expenses.filter((item) => item.id !== action.payload),\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      edit: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\nimport walletReducer from './walletReducer';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducers = combineReducers({\n  user: userReducer,\n  wallet: walletReducer,\n});\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducers from '../reducers';\n\nconst store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}